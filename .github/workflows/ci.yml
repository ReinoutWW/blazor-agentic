name: CI (strict)

on:
  pull_request:
    branches: [master, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

concurrency:
  group: ${{ github.head_ref }}-ci
  cancel-in-progress: true

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # ============================================================================
  # Code Quality & Security Checks
  # ============================================================================
  lint-and-format:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Check code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic
        
      - name: Run static analysis
        run: dotnet build --configuration Release --verbosity normal -warnaserror

  # ============================================================================
  # Unit & Integration Tests
  # ============================================================================
  test:
    name: "Test Suite"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'TestPassword123!' -C -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: |
          dotnet test \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx \
            --logger "console;verbosity=detailed"
        env:
          ConnectionStrings__SqlServer: "Server=localhost,1433;Database=HealthVoiceTestDB;User Id=sa;Password=TestPassword123!;TrustServerCertificate=true;"

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"coverage/**/coverage.cobertura.xml" \
            -targetdir:"coverage/report" \
            -reporttypes:"Html;Cobertura;JsonSummary"

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentage from JSON summary
          COVERAGE=$(cat coverage/report/Summary.json | grep -o '"linecoverage":[0-9.]*' | cut -d':' -f2)
          echo "Line coverage: $COVERAGE%"
          
          # Fail if coverage is below 85%
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below required 85%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets requirement"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/*.trx
            coverage/report/

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: "Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Run security audit
        run: dotnet list package --vulnerable --include-transitive 2>&1 | tee audit.log

      - name: Check for vulnerabilities
        run: |
          if grep -q "has the following vulnerable packages" audit.log; then
            echo "❌ Vulnerable packages detected:"
            cat audit.log
            exit 1
          else
            echo "✅ No vulnerable packages found"
          fi

  # ============================================================================
  # Docker Build & Test
  # ============================================================================
  docker-build:
    name: "Docker Build"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        service: [api, blazor]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: HealthVoice.${{ matrix.service == 'api' && 'Api' || 'Blazor' }}/Dockerfile
          push: false
          tags: healthvoice-${{ matrix.service }}:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start the container and test it responds
          docker run -d --name test-container \
            -p 8080:8080 \
            -e ASPNETCORE_ENVIRONMENT=Development \
            healthvoice-${{ matrix.service }}:ci-test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/health/live || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-format, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          # Start the full stack for integration testing
          docker compose -f docker-compose.monitoring.yml up -d --build
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until curl -f http://localhost:5000/health/ready; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:5002/health/ready; do sleep 5; done'

      - name: Run API integration tests
        run: |
          # Test REST endpoints
          curl -f http://localhost:5000/api/v1/patients
          
          # Test health endpoints
          curl -f http://localhost:5000/health/live
          curl -f http://localhost:5000/health/ready
          
          # Test metrics endpoint
          curl -f http://localhost:5000/metrics

      - name: Run Blazor integration tests
        run: |
          # Test Blazor health
          curl -f http://localhost:5002/health/ready
          
          # Test Blazor home page
          curl -f http://localhost:5002/

      - name: Test monitoring stack
        run: |
          # Test Prometheus
          curl -f http://localhost:9090/-/healthy
          
          # Test Grafana
          curl -f http://localhost:3000/api/health

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.monitoring.yml down -v

  # ============================================================================
  # Quality Gate Summary
  # ============================================================================
  quality-gate:
    name: "Quality Gate ✅"
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, docker-build, integration]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]] || \
             [[ "${{ needs.integration.result }}" != "success" ]]; then
            echo "❌ Quality gate failed - one or more checks did not pass"
            exit 1
          else
            echo "✅ Quality gate passed - all checks successful"
          fi 