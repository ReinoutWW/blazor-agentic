name: CD (Deploy)

on:
  push:
    branches: [master, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'development' }}
  cancel-in-progress: false  # Don't cancel deployments

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Build & Push Docker Images
  # ============================================================================
  build-api:
    name: "Build & Push API"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/healthvoice-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: HealthVoice.Api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-blazor:
    name: "Build & Push Blazor"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/healthvoice-blazor
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Blazor Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: HealthVoice.Blazor/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ============================================================================
  # Deploy to Development
  # ============================================================================
  deploy-development:
    name: "Deploy to Development"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-api, build-blazor]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || inputs.environment == 'development'
    
    environment:
      name: development
      url: https://healthvoice-dev.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development
        run: |
          echo "üöÄ Deploying HealthVoice to Development"
          echo "API Image: ${{ needs.build-api.outputs.image }}"
          echo "Blazor Image: ${{ needs.build-blazor.outputs.image }}"
          echo "Version: ${{ needs.build-api.outputs.version }}"
          
          # In a real scenario, this would:
          # - Update Kubernetes manifests
          # - Deploy via Helm charts
          # - Update Azure Container Apps
          # - Trigger deployment webhooks
          # - Update docker-compose files on target servers
          
          echo "‚úÖ Development deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against development environment"
          
          # Wait for deployment to be ready
          sleep 30
          
          # In a real scenario, these would be actual health checks:
          # curl -f https://healthvoice-dev.example.com/health/ready
          # curl -f https://healthvoice-api-dev.example.com/health/ready
          
          echo "‚úÖ Smoke tests passed"

      - name: Notify deployment success
        run: |
          echo "üì¢ Development deployment notification"
          # In real scenario: Slack/Teams/Discord webhook
          # curl -X POST ${{ secrets.SLACK_WEBHOOK }} -d '{"text":"HealthVoice deployed to dev"}'

  # ============================================================================
  # Deploy to Staging (Manual Approval)
  # ============================================================================
  deploy-staging:
    name: "Deploy to Staging"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-api, build-blazor, deploy-development]
    if: inputs.environment == 'staging' || (github.ref == 'refs/heads/master' && github.event_name == 'workflow_dispatch')
    
    environment:
      name: staging
      url: https://healthvoice-staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying HealthVoice to Staging"
          echo "API Image: ${{ needs.build-api.outputs.image }}"
          echo "Blazor Image: ${{ needs.build-blazor.outputs.image }}"
          
          # Staging deployment logic
          echo "‚úÖ Staging deployment completed"

      - name: Run comprehensive tests
        run: |
          echo "üß™ Running comprehensive test suite against staging"
          
          # Extended test suite for staging
          # - API contract tests
          # - UI automation tests
          # - Performance tests
          # - Security scans
          
          echo "‚úÖ All staging tests passed"

  # ============================================================================
  # Deploy to Production (Manual Approval + Extra Checks)
  # ============================================================================
  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-api, build-blazor, deploy-staging]
    if: inputs.environment == 'production'
    
    environment:
      name: production
      url: https://healthvoice.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-deployment checks
        run: |
          echo "üîç Running pre-deployment safety checks"
          
          # Check if staging is healthy
          # Verify database migrations are ready
          # Check for breaking changes
          # Validate configuration
          
          echo "‚úÖ Pre-deployment checks passed"

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying HealthVoice to Production"
          echo "API Image: ${{ needs.build-api.outputs.image }}"
          echo "Blazor Image: ${{ needs.build-blazor.outputs.image }}"
          
          # Blue-green or rolling deployment
          # Database migrations
          # Feature flag updates
          
          echo "‚úÖ Production deployment completed"

      - name: Post-deployment verification
        run: |
          echo "üîç Post-deployment verification"
          
          # Health checks
          # Critical user journey tests
          # Performance baseline verification
          # Monitoring alert checks
          
          echo "‚úÖ Production verification completed"

      - name: Notify stakeholders
        run: |
          echo "üì¢ Production deployment notification"
          # Notify stakeholders via multiple channels
          # Update status page
          # Log deployment in audit trail

  # ============================================================================
  # Rollback (Manual Trigger)
  # ============================================================================
  rollback:
    name: "Emergency Rollback"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'workflow_dispatch' && inputs.environment != ''
    
    environment:
      name: ${{ inputs.environment }}-rollback
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back HealthVoice in ${{ inputs.environment }}"
          
          # Rollback to previous known good version
          # Revert database migrations if needed
          # Update load balancer configurations
          
          echo "‚úÖ Rollback completed"

      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback success"
          
          # Health checks on rolled back version
          # Verify core functionality
          
          echo "‚úÖ Rollback verification completed"

      - name: Alert on rollback
        run: |
          echo "üö® ROLLBACK ALERT for ${{ inputs.environment }}"
          # High-priority alerts to all stakeholders 