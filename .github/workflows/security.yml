name: Security Scan

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # CodeQL Analysis
  # ============================================================================
  codeql:
    name: "CodeQL Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['csharp', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build .NET solution
        if: matrix.language == 'csharp'
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ============================================================================
  # Dependency Vulnerability Scan
  # ============================================================================
  dependency-scan:
    name: "Dependency Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run .NET vulnerability scan
        run: |
          echo "üîç Scanning for vulnerable .NET packages..."
          dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
          
          if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
            echo "‚ùå Vulnerable packages found!"
            cat vulnerability-report.txt
            exit 1
          else
            echo "‚úÖ No vulnerable packages detected"
          fi

      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: vulnerability-report.txt

  # ============================================================================
  # Container Security Scan
  # ============================================================================
  container-security:
    name: "Container Security"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        service: [api, blazor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: HealthVoice.${{ matrix.service == 'api' && 'Api' || 'Blazor' }}/Dockerfile
          push: false
          tags: healthvoice-${{ matrix.service }}:security-scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'healthvoice-${{ matrix.service }}:security-scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Run Docker security scan
        run: |
          echo "üîç Running Docker security best practices check..."
          
          # Check for security best practices
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/root/ \
            projectatomic/dockerfile-lint \
            dockerfile_lint -f HealthVoice.${{ matrix.service == 'api' && 'Api' || 'Blazor' }}/Dockerfile

  # ============================================================================
  # Secret Scanning
  # ============================================================================
  secret-scan:
    name: "Secret Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================================================
  # Infrastructure as Code Security
  # ============================================================================
  iac-security:
    name: "IaC Security"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov on Docker Compose
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: reports/checkov.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/checkov.sarif

  # ============================================================================
  # Security Policy Compliance
  # ============================================================================
  compliance-check:
    name: "Compliance Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy compliance
        run: |
          echo "üîç Checking HealthVoice security policy compliance..."
          
          # Check for required security files
          files_to_check=(
            "SECURITY.md"
            ".github/SECURITY.md" 
            "docker-compose.monitoring.yml"
          )
          
          missing_files=()
          for file in "${files_to_check[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required security files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "‚úÖ All required security files present"
          fi

      - name: Check Docker security settings
        run: |
          echo "üîç Checking Docker security configurations..."
          
          # Check docker-compose for security best practices
          if grep -q "privileged.*true" docker-compose*.yml; then
            echo "‚ùå Privileged containers detected"
            exit 1
          fi
          
          if grep -q "user.*root" docker-compose*.yml; then
            echo "‚ö†Ô∏è  Root user detected in containers"
          fi
          
          echo "‚úÖ Docker security check completed"

      - name: Check environment variable security
        run: |
          echo "üîç Checking for hardcoded secrets in environment files..."
          
          # Check for potential secrets in config files
          secret_patterns=(
            "password.*="
            "secret.*="
            "token.*="
            "key.*="
          )
          
          for pattern in "${secret_patterns[@]}"; do
            if grep -ri "$pattern" appsettings*.json docker-compose*.yml; then
              echo "‚ö†Ô∏è  Potential hardcoded secret found: $pattern"
            fi
          done
          
          echo "‚úÖ Environment security check completed"

  # ============================================================================
  # Security Summary
  # ============================================================================
  security-summary:
    name: "Security Summary ‚úÖ"
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-security, secret-scan, iac-security, compliance-check]
    if: always()

    steps:
      - name: Security gate summary
        run: |
          echo "üõ°Ô∏è  Security Scan Results Summary"
          echo "=================================="
          echo "CodeQL Analysis: ${{ needs.codeql.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "IaC Security: ${{ needs.iac-security.result }}"
          echo "Compliance Check: ${{ needs.compliance-check.result }}"
          
          # Fail if any critical security check failed
          if [[ "${{ needs.codeql.result }}" != "success" ]] || \
             [[ "${{ needs.dependency-scan.result }}" != "success" ]] || \
             [[ "${{ needs.container-security.result }}" != "success" ]] || \
             [[ "${{ needs.secret-scan.result }}" != "success" ]]; then
            echo "‚ùå Critical security checks failed"
            exit 1
          else
            echo "‚úÖ All security checks passed"
          fi 